import base64
exec(base64.b64decode("""# -*- coding: utf-8 -*-
from .. import loader, utils
import logging
from datetime import timedelta, datetime
import re

from telethon.tl.types import ChatAdminRights, ChatBannedRights
from telethon.errors import BadRequestError
from telethon.tl.functions.channels import EditAdminRequest, EditBannedRequest
from telethon.tl.functions.messages import EditChatAdminRequest

logger = logging.getLogger(__name__)


@loader.tds
class BanMod(loader.Module):
    """"Админтулс — ban, unban, kick, promote, demote, mute, unmute, pin, unpin, warn
👤 Автор: @xduko"""
    __author__ = "@xduko"
    strings = {
        "name": "AdminTools",
        "author": "@xduko",
        "not_supergroup": "<b>Это не супергруппа!</b>",
        "not_group": "<b>Это не группа!</b>",
        "ban_none": "<b>Кого банить?</b>",
        "unban_none": "<b>Кого разбанить?</b>",
        "kick_none": "<b>Кто хочет принудительно покинуть чат?</b>",
        "promote_none": "<b>Кто хочет опку?</b>",
        "demote_none": "<b>Укажи с кого снять админку?</b>",
        "mute_none": "<b>Кого замьютить?</b>",
        "unmute_none": "<b>Кого размьютить?</b>",
        "who": "<b>Кого...?</b>",
        "not_admin": "<b>Я не администратор...</b>",
        "banned": "<code>{}</code> <b>получил бан!</b> ID: <code>{}</code>",
        "unbanned": "<code>{}</code> <b>разбанен!</b> ID: <code>{}</code>",
        "kicked": "<code>{}</code> <b>кикнут!</b> ID: <code>{}</code>",
        "promoted": "<code>{}</code> <b>стал админом!</b> ID: <code>{}</code>",
        "demoted": "<code>{}</code> <b>лишён админки!</b> ID: <code>{}</code>",
        "muted": "<code>{}</code> <b>замьючен на {}</b> ID: <code>{}</code>",
        "unmuted": "<code>{}</code> <b>размьючен</b> ID: <code>{}</code>",
        "pin_none": "<b>Ответь на сообщение, чтобы закрепить!</b>",
        "unpin_done": "<b>Сообщение откреплено.</b>",
        "warned": "<code>{}</code> получил предупреждение ({}/3)",
        "warn_reset": "<code>{}</code> больше не имеет предупреждений.",
        "warn_removed": "У <code>{}</code> удалено предупреждение ({}/3)",
        "warn_banned": "<code>{}</code> получил 3 предупреждения и был забанен на 3 дня!",
        "warns": "<code>{}</code> имеет {}/3 предупреждений."
    }

    def __init__(self):
        self.config = loader.ModuleConfig("WARN_BAN_DAYS", 3, lambda m: "Сколько дней бана за 3 варна")
        self.db = None

    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    def _parse_time(self, text):
        match = re.fullmatch(r"(\d+)([smhdwM])", text)
        if not match:
            return None
        num, unit = int(match[1]), match[2]
        return timedelta(seconds=num) if unit == "s" else \
               timedelta(minutes=num) if unit == "m" else \
               timedelta(hours=num) if unit == "h" else \
               timedelta(days=num) if unit == "d" else \
               timedelta(weeks=num) if unit == "w" else \
               timedelta(days=30*num) if unit == "M" else None

    def _get_warns(self, chat_id, user_id):
        return self.db.get("AdminTools", f"warns_{chat_id}_{user_id}", 0)

    def _set_warns(self, chat_id, user_id, count):
        self.db.set("AdminTools", f"warns_{chat_id}_{user_id}", count)

    def _add_warn(self, chat_id, user_id):
        self._set_warns(chat_id, user_id, self._get_warns(chat_id, user_id) + 1)

    def _remove_warn(self, chat_id, user_id):
        count = max(0, self._get_warns(chat_id, user_id) - 1)
        self._set_warns(chat_id, user_id, count)

    async def _get_user(self, message, none_text):
        if message.is_reply:
            reply = await message.get_reply_message()
            if not reply:
                await utils.answer(message, none_text)
                return None
            return await utils.get_user(reply)
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, none_text)
            return None
        who = int(args[0]) if args[0].isdigit() else args[0]
        try:
            return await self.client.get_entity(who)
        except Exception:
            await utils.answer(message, self.strings("who", message))
            return None

    @loader.group_admin_ban_users
    async def bancmd(self, message):
        """Бан"""
        user = await self._get_user(message, self.strings("ban_none", message))
        if not user:
            return
        try:
            await self.client(EditBannedRequest(message.chat_id, user.id,
                ChatBannedRights(until_date=None, view_messages=True)))
        except BadRequestError:
            return await utils.answer(message, self.strings("not_admin", message))
        await utils.answer(message, self.strings("banned", message).format(utils.escape_html(user.first_name), user.id))

    @loader.group_admin_ban_users
    async def unbancmd(self, message):
        """Разбан"""
        user = await self._get_user(message, self.strings("unban_none", message))
        if not user:
            return
        try:
            await self.client(EditBannedRequest(message.chat_id, user.id,
                ChatBannedRights(until_date=None, view_messages=False)))
        except BadRequestError:
            return await utils.answer(message, self.strings("not_admin", message))
        await utils.answer(message, self.strings("unbanned", message).format(utils.escape_html(user.first_name), user.id))

    @loader.group_admin_ban_users
    async def kickcmd(self, message):
        """Кик"""
        user = await self._get_user(message, self.strings("kick_none", message))
        if not user:
            return
        try:
            await self.client.kick_participant(message.chat_id, user.id)
        except BadRequestError:
            return await utils.answer(message, self.strings("not_admin", message))
        await utils.answer(message, self.strings("kicked", message).format(utils.escape_html(user.first_name), user.id))

    @loader.group_admin_add_admins
    async def promotecmd(self, message):
        """Выдать админку. Использование: .promote [реплай или user_id/username] [ранг]"""
        args = utils.get_args(message)
        user = await self._get_user(message, self.strings("promote_none", message))
        if not user:
            return
    
        # Определим, какой ранг установить
        # Если юзер взят через реплай, то args содержит только ранг
        # Если юзер взят через аргумент, то args[0] — это id/username, args[1:] — ранг
        if message.is_reply or (len(args) == 1 and not args[0].isdigit() and not args[0].startswith("@")):
            rank = ' '.join(args) if args else "Админ"
        else:
            rank = ' '.join(args[1:]) if len(args) > 1 else "Админ"
    
        rights = ChatAdminRights(
            change_info=True, post_messages=True, edit_messages=True,
            delete_messages=True, ban_users=True, invite_users=True,
            pin_messages=True, add_admins=False, anonymous=False, manage_call=True
        )
    
        try:
            await self.client(EditAdminRequest(message.chat_id, user.id, rights, rank))
        except BadRequestError:
            return await utils.answer(message, self.strings("not_admin", message))
    
        await utils.answer(
            message,
            self.strings("promoted", message).format(utils.escape_html(user.first_name), user.id)
        )

    @loader.group_admin_add_admins
    async def demotecmd(self, message):
        """Снять админку"""
        user = await self._get_user(message, self.strings("demote_none", message))
        if not user:
            return
        try:
            await self.client(EditAdminRequest(message.chat_id, user.id,
                ChatAdminRights(False, False, False, False, False, False, False, False, False), ""))
        except BadRequestError:
            try:
                await self.client(EditChatAdminRequest(message.chat_id, user.id, False))
            except:
                return await utils.answer(message, self.strings("not_admin", message))
        await utils.answer(message, self.strings("demoted", message).format(utils.escape_html(user.first_name), user.id))

    @loader.group_admin_ban_users
    async def mutecmd(self, message):
        """Мут (например: .mute @user 10m или .mute 10h в ответ)"""
        args = utils.get_args(message)
        user = await self._get_user(message, self.strings("mute_none", message))
        if not user:
            return

        # Определяем длительность
        time_arg = None
        for arg in args:
            if self._parse_time(arg):
                time_arg = arg
                break
        delta = self._parse_time(time_arg) if time_arg else timedelta(days=365)
        until = datetime.utcnow() + delta

        try:
            await self.client(EditBannedRequest(message.chat_id, user.id,
                ChatBannedRights(until_date=until, send_messages=True)))
        except BadRequestError:
            return await utils.answer(message, self.strings("not_admin", message))

        duration = time_arg if time_arg else "навсегда"
        await utils.answer(message, self.strings("muted", message).format(
            utils.escape_html(user.first_name), duration, user.id))

    # ========= WARN SYSTEM =========

    @loader.group_admin_ban_users
    async def warncmd(self, message):
        """Выдать предупреждение"""
        user = await self._get_user(message, self.strings("who", message))
        if not user:
            return
        chat_id = str(message.chat_id)
        user_id = user.id
        self._add_warn(chat_id, user_id)
        count = self._get_warns(chat_id, user_id)
        if count >= 3:
            until = datetime.utcnow() + timedelta(days=self.config["WARN_BAN_DAYS"])
            try:
                await self.client(EditBannedRequest(message.chat_id, user.id,
                    ChatBannedRights(until_date=until, view_messages=True)))
            except BadRequestError:
                return await utils.answer(message, self.strings("not_admin", message))
            self._set_warns(chat_id, user_id, 0)
            return await utils.answer(message, self.strings("warn_banned", message).format(utils.escape_html(user.first_name)))
        await utils.answer(message, self.strings("warned", message).format(utils.escape_html(user.first_name), count))

    @loader.group_admin_ban_users
    async def unwarncmd(self, message):
        """Удалить 1 предупреждение"""
        user = await self._get_user(message, self.strings("who", message))
        if not user:
            return
        chat_id = str(message.chat_id)
        user_id = user.id
        old = self._get_warns(chat_id, user_id)
        self._remove_warn(chat_id, user_id)
        count = self._get_warns(chat_id, user_id)
        if old == 0:
            return await utils.answer(message, self.strings("warn_reset", message).format(utils.escape_html(user.first_name)))
        await utils.answer(message, self.strings("warn_removed", message).format(utils.escape_html(user.first_name), count))

    async def warnscmd(self, message):
        """Показать количество предупреждений"""
        user = await self._get_user(message, self.strings("who", message))
        if not user:
            return
        count = self._get_warns(str(message.chat_id), user.id)
        await utils.answer(message, self.strings("warns", message).format(utils.escape_html(user.first_name), count))
        
    async def delcmd(self, message):
        """Удалить сообщение (реплай)"""
        if not message.is_reply:
            return await utils.answer(message, "<b>Ответь на сообщение, которое нужно удалить.</b>")
        reply = await message.get_reply_message()
        await self.client.delete_messages(message.chat_id, [reply.id, message.id])
        
    @loader.group_admin_ban_users
    async def unmutecmd(self, message):
        """Размьютить"""
        user = await self._get_user(message, self.strings("unmute_none", message))
        if not user:
            return
        try:
            await self.client(EditBannedRequest(message.chat_id, user.id,
                ChatBannedRights(until_date=None, send_messages=False)))
        except BadRequestError:
            return await utils.answer(message, self.strings("not_admin", message))
        await utils.answer(message, self.strings("unmuted", message).format(utils.escape_html(user.first_name), user.id))

    @loader.group_admin_pin_messages
    async def unpinallcmd(self, message):
        """Открепить все закреплённые сообщения в чате"""
        try:
            await self.client.unpin_message(message.chat_id)  # Без message_ids = снимает все
            await utils.answer(message, "<b>Все сообщения откреплены.</b>")
        except Exception as e:
            await utils.answer(message, f"<b>Ошибка:</b> {e}")
    
    @loader.group_admin_pin_messages
    async def pincmd(self, message):
        """Закрепить сообщение (реплай) — silent, если указать закрепить без уведомления"""
        if not message.is_reply:
            return await utils.answer(message, self.strings("pin_none", message))
    
        args = utils.get_args(message)
        silent = "silent" in args or "беззвука" in args
    
        try:
            await self.client.pin_message(
                message.chat_id,
                message.reply_to_msg_id,
                notify=not silent
            )
        except Exception as e:
            return await utils.answer(message, f"<b>Ошибка закрепления:</b> {e}")
            
    @loader.group_admin_delete_messages
    async def spurgecmd(self, message):
        """Удалить все сообщения после (и включая) ответного сообщения"""
        if not message.is_reply:
            return await utils.answer(message, "<b>Ответь на сообщение, с которого нужно удалить всё ниже.</b>")
    
        reply = await message.get_reply_message()
        if not reply:
            return await utils.answer(message, "<b>Не удалось получить сообщение.</b>")
    
        chat = message.chat_id
        start_id = reply.id
        end_id = message.id
    
        try:
            # Удаляем сообщения с start_id по end_id включительно
            ids_to_delete = list(range(start_id, end_id + 1))
            await self.client.delete_messages(chat, ids_to_delete)
        except Exception as e:
            return await utils.answer(message, f"<b>Ошибка удаления:</b> {e}")
    

    @loader.group_admin_pin_messages
    async def unpincmd(self, message):
        """Открепить сообщение (реплай)"""
        if not message.is_reply:
            return await utils.answer(message, "<b>Ответь на сообщение, которое нужно открепить.</b>")
    
        reply = await message.get_reply_message()
        if not reply:
            return await utils.answer(message, "<b>Не удалось получить сообщение.</b>")
    
        try:
            await reply.unpin()  # 💡 самый надёжный способ для юзерботов
            await utils.answer(message, self.strings("unpin_done", message))
        except Exception as e:
            await utils.answer(message, f"<b>Ошибка:</b> {e}")
            
            
    @loader.unrestricted
    async def helpscmd(self, message):
        """Показать справку по модулю"""
        mod_name = self.strings("name", message)
        mod_author = self.strings("author", message)
    
        help_text = f"<b>📦 Модуль:</b> <code>{mod_name}</code>\n"
        help_text += f"<b>👤 Автор:</b> {mod_author}\n"
        help_text += f"<b>📚 Возможности:</b>\n\n"
    
        for name, func in self.__class__.__dict__.items():
            if name.endswith("cmd") and func.__doc__:
                cmd = name[:-3]
                doc = func.__doc__.strip()
                help_text += f"• <code>.{cmd}</code> — {doc}\n"
    
        await utils.answer(message, help_text)"""))